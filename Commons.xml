<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Commons</name>
    </assembly>
    <members>
        <member name="T:Kitchen.Drawing.Point`1">
            <summary>
            Represents a pair of Cartesian coordinates, defining a point in a two-dimensional plane.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Kitchen.Drawing.Point`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Kitchen.Drawing.Point`1"/> struct.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
        </member>
        <member name="P:Kitchen.Drawing.Point`1.X">
            <summary>
            Gets the x-coordinate.
            </summary>
            <value>
            The x-coordinate.
            </value>
        </member>
        <member name="P:Kitchen.Drawing.Point`1.Y">
            <summary>
            Gets the y-coordinate.
            </summary>
            <value>
            The y-coordinate.
            </value>
        </member>
        <member name="T:Kitchen.Drawing.Range`1">
            <summary>
            Represents an ordered pair of numeric values, defining the start and end of a continuous range in one dimension.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Kitchen.Drawing.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Kitchen.Drawing.Range`1"/> struct.
            </summary>
            <param name="start">The range start value.</param>
            <param name="end">The range end value.</param>
        </member>
        <member name="P:Kitchen.Drawing.Range`1.Start">
            <summary>
            Gets the range start value.
            </summary>
            <value>
            The range start value.
            </value>
        </member>
        <member name="P:Kitchen.Drawing.Range`1.End">
            <summary>
            Gets the range end value.
            </summary>
            <value>
            The range end value.
            </value>
        </member>
        <member name="T:Kitchen.Drawing.RectRegion`1">
            <summary>
            Represents a pair of x-coordinates and a pair of y-coordinates, defining a rectangular region by its start and end position in each dimension.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Kitchen.Drawing.RectRegion`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Kitchen.Drawing.RectRegion`1"/> struct.
            </summary>
            <param name="x1">The left (lesser) x-coordinate.</param>
            <param name="x2">The right (greater) x-coordinate.</param>
            <param name="y1">The bottom (lesser) y-coordinate.</param>
            <param name="y2">The top (greater) y-coordinate.</param>
        </member>
        <member name="P:Kitchen.Drawing.RectRegion`1.X1">
            <summary>
            Gets the left (lesser) x-coordinate.
            </summary>
            <value>
            The left (lesser) x-coordinate.
            </value>
        </member>
        <member name="P:Kitchen.Drawing.RectRegion`1.X2">
            <summary>
            Gets the right (greater) x-coordinate.
            </summary>
            <value>
            The right (greater) x-coordinate.
            </value>
        </member>
        <member name="P:Kitchen.Drawing.RectRegion`1.Y1">
            <summary>
            Gets the bottom (lesser) y-coordinate.
            </summary>
            <value>
            The bottom (lesser) y-coordinate.
            </value>
        </member>
        <member name="P:Kitchen.Drawing.RectRegion`1.Y2">
            <summary>
            Gets the top (greater) y-coordinate.
            </summary>
            <value>
            The top (greater) y-coordinate.
            </value>
        </member>
        <member name="T:Kitchen.Enumerations.Enum`1">
            <summary>
            An enhanced, named enumeration class. All members must be declared as public static read-only fields to the implementing class.
            The name (identifier) of each member may be obtained as a string.
            </summary>
            <typeparam name="T">The implementing class, derived from <cref>Enum</cref>.</typeparam>
        </member>
        <member name="M:Kitchen.Enumerations.Enum`1.AddMember(System.String,`0)">
            <summary>
            Adds a member to the enum that was not declared in code.
            Can be used to load members from an external source at runtime.
            Note that members cannot be removed at runtime.
            </summary>
            <param name="name">The name (identifier) of the member.</param>
            <param name="member">The member.</param>
        </member>
        <member name="M:Kitchen.Enumerations.Enum`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Kitchen.Enumerations.Enum`1.op_Explicit(System.String)~Kitchen.Enumerations.Enum{`0}">
            <summary>
            Performs an explicit conversion from <see cref="T:System.String"/> to Enum{T}.
            </summary>
            <param name="name">The name.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when no member of this enum has the specified name</exception>
        </member>
        <member name="P:Kitchen.Enumerations.Enum`1.Members">
            <summary>
            A read-only collection containing all the members of the enum.
            </summary>
        </member>
        <member name="P:Kitchen.Enumerations.Enum`1.Name">
            <summary>
            The member's name, which is its identifier.
            Beware that the identifier, and so this property, will be changed if an obfuscator is used.
            </summary>
        </member>
        <member name="T:Kitchen.Enumerations.KeyedEnum`2">
            <summary>
            A keyed enum class. Implementations must specify the key type, and may include any other required properties.
            </summary>
            <remarks>
            All members must be added as static read-only fields to the implementing class.
            </remarks>
            <typeparam name="TKey">The enum key type. Built-in types are strongly recommended.</typeparam>
            <typeparam name="T">The implementing class, derived from Enum.</typeparam>
        </member>
        <member name="M:Kitchen.Enumerations.KeyedEnum`2.AddMember(System.String,`1)">
            <summary>
            Adds a member to the enum that was not declared in code.
            Can be used to load members from an external source at runtime.
            Note that members cannot be removed at runtime.
            </summary>
            <param name="name">The name (identifier) of the member.</param>
            <param name="member">The member.</param>
        </member>
        <member name="P:Kitchen.Enumerations.KeyedEnum`2.Members">
            <summary>
            A read-only collection containing all the members of the enum.
            </summary>
        </member>
        <member name="P:Kitchen.Enumerations.KeyedEnum`2.Name">
            <summary>
            The name of this member. Can also be obtained by casting the member to a string, if the key is not already a string.
            </summary>
        </member>
        <member name="P:Kitchen.Enumerations.KeyedEnum`2.Key">
            <summary>
            The key of this member. The key may also be obtained by explicitly casting the member to the key type.
            </summary>
        </member>
        <member name="M:Kitchen.Extensions.Yield``1(``0)">
            <summary>
            Wraps this object instance into an IEnumerable{T} consisting of a single item.
            If the object is null, an empty IEnumerable{T} will be returned.
            </summary>
            <typeparam name="T">Type of the wrapped object.</typeparam>
            <param name="item">The object to wrap.</param>
            <returns>
            An IEnumerable{T} consisting of a single item, or no items if the object is null.
            </returns>
        </member>
        <member name="M:Kitchen.Forms.ComboBoxExtensions.SetItems(System.Windows.Forms.ComboBox,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Populate the ComboBox with the given IEnumerable{string} of items.
            </summary>
            <param name="comboBox">The ComboBox to populate.</param>
            <param name="items">The items to populate the ComboBox with.</param>
            <param name="refreshIfSameCount">Whether to refresh the ComboBox items collection if the existing number of items is the same as the number of items provided.</param>
        </member>
        <member name="M:Kitchen.Forms.IOErrorHandling.AttemptIOAction(System.Action,System.String,System.String)">
            <summary>
            Attempt an IO action. If an IOException or an UnauthorizedAccessException occurs,
            the operation will be retried if the user chooses 'Retry' in a dialog with the specified text and caption.
            Returns a boolean value indicating whether or not the operation was successful.
            </summary>
            <param name="ioAction">The IO action to perform</param>
            <param name="shouldRetryDialogText">The text for the dialog asking the user if they want to retry the action.</param>
            <param name="shouldRetryDialogCaption">The caption for the dialog asking the user if they want to retry the action.</param>
        </member>
        <member name="T:Kitchen.Forms.TextBoxValidator">
            <summary>
            A textbox adapter that applies input validation as a user enters text.
            The TextChangeValidated event should be handled to detect when the TextBox input text is changed.
            </summary>
        </member>
        <member name="M:Kitchen.Forms.TextBoxValidator.#ctor(System.Windows.Forms.TextBox,System.Predicate{System.String},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TextBoxValidator class.
            </summary>
            <param name="textBox">The TextBox which will be validated</param>
            <param name="validationPredicate">A predicate to test the TextBox text against, to determine its validity</param>
            <param name="validateImmediately">Whether to immediately validate input upon user input, or wait until focus moves from the text box.</param>
            <param name="removeInvalidInputs">Whether to immediately remove invalid inputs from the text box</param>
        </member>
        <member name="E:Kitchen.Forms.TextBoxValidator.TextChanged">
            <summary>
            Occurs when the TextBox text change is committed and this change is validated.
            </summary>
        </member>
        <member name="M:Kitchen.IO.ErrorHandling.AttemptIOAction(System.Action,System.Func{System.Exception,System.Boolean})">
            <summary>
            Attempt an IO action. If an IOException or an UnauthorizedAccessException occurs,
            the operation will be retried if the shouldRetry function returns true; otherwise the operation will be abandoned.
            Returns a boolean value indicating whether or not the operation was successful.
            </summary>
            <param name="ioAction">The IO action to perform</param>
            <param name="shouldRetry">
            The function called if an IOException or UnauthorizedAccessException occurs.
            Takes the exception as a paramater, and returns a boolean indicating whether or not to retry the operation.
            </param>
        </member>
        <member name="T:Kitchen.IO.PartialFileStream">
            <summary>
            A modified FileStream, where only a certain portion of the file will be read.
            </summary>
        </member>
        <member name="M:Kitchen.IO.PartialFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current stream and writes the data to a buffer.
            The stream will not be read beyond the ReadEndPosition,
            but if seeking is performed it may be read from before the readStartPosition orginally specified.
            </summary>
            <returns>
            The total number of bytes written into the buffer.
            This can be less than the number of bytes requested if that number of bytes are not currently available,
            or zero if the end of the stream is reached before any bytes are read.
            </returns>
            <param name="buffer">When this method returns, contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the characters read from the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing data from the current stream.</param><param name="count">The maximum number of bytes to read. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.ArgumentException"><paramref name="offset"/> subtracted from the buffer length is less than <paramref name="count"/>. </exception>
            <exception cref="T:System.ObjectDisposedException">The current stream instance is closed. </exception>
        </member>
        <member name="P:Kitchen.IO.PartialFileStream.ReadEndPosition">
            <summary>
            The end position of the stream, at which the stream will no longer read.
            </summary>
        </member>
        <member name="M:Kitchen.IO.XElementExtensions.ParseToKeyedEnum``2(System.Xml.Linq.XElement,``1)">
            <summary>
            Converts the value in the XElement to a member of the specified KeyedEnum, which has a string Key.
            </summary>
            <typeparam name="T">The type, derived from KeyEnum and with a string Key, to return</typeparam>
            <typeparam name="TKey">The key type.</typeparam>
            <param name="element">The XElement to get the value from.</param>
            <param name="defaultValue">The value to return if a corresponding element is not found.</param>
            <returns>
            The value from the specified element, converted to a NamedEnum member of type T,
            or the specified default value if a corresponding element is not found.
            </returns>	
        </member>
        <member name="M:Kitchen.IO.XElementExtensions.ParseToStringKeyedEnum``1(System.Xml.Linq.XElement,``0)">
            <summary>
            Converts the value in the XElement to a member of the specified KeyedEnum, which has a string Key.
            </summary>
            <typeparam name="T">The type, derived from KeyEnum and with a string Key, to return</typeparam>
            <param name="element">The XElement to get the value from.</param>
            <param name="defaultValue">The value to return if a corresponding element is not found.</param>
            <returns>
            The value from the specified element, converted to a NamedEnum member of type T,
            or the specified default value if a corresponding element is not found.
            </returns>	
        </member>
        <member name="M:Kitchen.IO.XElementExtensions.ParseToNamedEnum``1(System.Xml.Linq.XElement,``0)">
            <summary>
            Converts the value in the XElement to a member of the specified NamedEnum.
            </summary>
            <typeparam name="T">The type, derived from NamedEnum, to return</typeparam>
            <param name="element">The XElement to get the value from.</param>
            <param name="defaultValue">The value to return if a corresponding element is not found.</param>
            <returns>
            The value from the specified element, converted to a NamedEnum member of type T,
            or the specified default value if a corresponding element is not found.
            </returns>
        </member>
        <member name="M:Kitchen.IO.XElementExtensions.ParseToType``1(System.Xml.Linq.XElement,System.Converter{System.String,``0},``0)">
            <summary>
            Gets the value in an XElement as a specified type, using the specified conversion.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="element">The XElement to get the value from.</param>
            <param name="defaultValue">The value to return if the element is not found, or the conversion raises an exception.</param>
            <param name="conversion">A conversion function, which takes a string parameter to convert, and returns a value of type T.</param>
            <returns>The value from the specified element, converted to type T, or the specified default value if the conversion fails.</returns>
        </member>
        <member name="M:Kitchen.Messages.IMessageBroker.Publish``1(``0)">
            <summary>Publishes the specified message.</summary>
            <typeparam name="TMessage">The message type.</typeparam>
            <param name="message">The message.</param>
        </member>
        <member name="M:Kitchen.Messages.IMessageBroker.Subscribe``1(Kitchen.Messages.MessageHandler{``0},System.Boolean)">
            <summary>
            Subscribes to the specified message type, in either a strong or weak fashion. The given handler delegate
            will be called whenever a message of this type, or a derrived type (if raising parent message types was
            set to true in the constructor), is published.
            </summary>
            <typeparam name="TMessage">The message type.</typeparam>
            <param name="handler">
            The message handler. This should be a static or instance method, an anonymous method, or a lambda that is
            not a closure.
            </param>
            <param name="subcribeWeakly">
            If set to <c>true</c> a weak subscription will be created. This means that the message broker will only
            hold a weak reference to the subscriber, allowing it to be garbage collected. If set to <c>false</c>, the
            message broker will hold a strong reference will be held to the subcriber, so it must later call
            Unsubscribe in order to be garbage collected.
            </param>
        </member>
        <member name="M:Kitchen.Messages.IMessageBroker.Unsubscribe``1(Kitchen.Messages.MessageHandler{``0})">
            <summary>
            Unsubscribes the specified handler from this type of message. Returns a boolean indicating whether the
            specified handler was found and successfully unsubscribed. A return value of <c>false</c> would indicate
            that the specified handler was not already subscribed to this type of message.
            </summary>
            <typeparam name="TMessage">The message type.</typeparam>
            <param name="handler">The message handler.</param>
        </member>
        <member name="M:Kitchen.Messages.IMessageBroker.UnsubscribeAll``1(System.Object)">
            <summary>
            Unsubscribes all handlers belonging to the given subscriber object from this type of message.
            Returns the number of handlers that were unsubscribed.
            </summary>
            <typeparam name="TMessage">The message type.</typeparam>
            <param name="subscriber">The subscriber object, typically 'this' (if called from the subscriber).</param>
            <returns></returns>
        </member>
        <member name="M:Kitchen.Messages.IMessageBroker.UnsubscribeAll(System.Object)">
            <summary>
            Unsubscribes all handlers belonging to the given subscriber object from any messages.
            Returns the number of handlers that were unsubscribed.
            </summary>
            <param name="subscriber">The subscriber object, typically 'this' (if called from the subscriber).</param>
        </member>
        <member name="M:Kitchen.Messages.MessageBroker.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Kitchen.Messages.MessageBroker"/> class.</summary>
            <param name="publishParentMessages">
            If set to <c>true</c>, when a message of a certain type is published, messages of all parent types (up to
            Message) will also be published. This allows you to implement handlers of inherited message types, which
            are also invoked when a message of any derrived type is published. If set to <c>false</c>, only handlers
            for the exact message type will be invoked. This is <c>true</c> by default.
            </param>
        </member>
        <member name="M:Kitchen.SettingsOld.ISettingsRepository.SaveSettingsGroup(Kitchen.SettingsOld.SettingsGroupBase)">
            <summary>
            Save all of the settings from a particular settings group to the store.
            </summary>
            <param name="settingsGroup">The settings group.</param>
        </member>
        <member name="M:Kitchen.SettingsOld.ISettingsRepository.LoadSettingsGroup(Kitchen.SettingsOld.SettingsGroupBase,System.Boolean)">
            <summary>
            Load all the settings for a particular settings group from the store.
            </summary>
            <param name="settingsGroup">The settings group.</param>
            <param name="defaultOnError">Whether to revert a setting to its default value if it cannot be loaded.</param>
        </member>
        <member name="M:Kitchen.Shortcuts.MsiShortcutUtils.IsMsiShortcut(Kitchen.Shortcuts.ShellShortcut)">
            <summary>Determines whether the specified shortcut is an MSI shortcut.</summary>
            <param name="shortcut">The shortcut.</param>
        </member>
        <member name="M:Kitchen.Shortcuts.MsiShortcutUtils.GetMsiShortcutTarget(System.String)">
            <summary>
            Gets the target path of an MSI shortcut. May return null if a target executable path could not be obtained.
            Must be called from an STA thread.
            </summary>
            <param name="shortcutFilePath">The shortcut file path.</param>
            <returns></returns>
        </member>
        <member name="T:Kitchen.Shortcuts.ShellShortcut">
            <summary>
              .NET friendly wrapper for the ShellLink class
            </summary>
        </member>
        <member name="M:Kitchen.Shortcuts.ShellShortcut.#ctor(System.String)">
            
             <param name='linkPath'>
               Path to new or existing shortcut file (.lnk).
             </param>
            
        </member>
        <member name="M:Kitchen.Shortcuts.ShellShortcut.Save">
            <summary>
              Saves the shortcut to disk.
            </summary>
        </member>
        <member name="P:Kitchen.Shortcuts.ShellShortcut.Arguments">
            <summary>
              Gets or sets the argument list of the shortcut.
            </summary>
        </member>
        <member name="P:Kitchen.Shortcuts.ShellShortcut.Description">
            <summary>
              Gets or sets a description of the shortcut.
            </summary>
        </member>
        <member name="P:Kitchen.Shortcuts.ShellShortcut.WorkingDirectory">
            <summary>
            Gets or sets the working directory (aka start-in directory) of the shortcut.
            </summary>
        </member>
        <member name="P:Kitchen.Shortcuts.ShellShortcut.TargetPath">
            <summary>
              Gets or sets the target path of the shortcut.
            </summary>
        </member>
        <member name="P:Kitchen.Shortcuts.ShellShortcut.IconPath">
            <summary>
              Gets or sets the path of the <see cref="P:Kitchen.Shortcuts.ShellShortcut.Icon"/> assigned to the shortcut.
            </summary>
            <summary>
              <seealso cref="P:Kitchen.Shortcuts.ShellShortcut.IconIndex"/>
            </summary>
        </member>
        <member name="P:Kitchen.Shortcuts.ShellShortcut.IconIndex">
            <summary>
              Gets or sets the index of the <see cref="P:Kitchen.Shortcuts.ShellShortcut.Icon"/> assigned to the shortcut.
              Set to zero when the <see cref="P:Kitchen.Shortcuts.ShellShortcut.IconPath"/> property specifies a .ICO file.
            </summary>
            <summary>
              <seealso cref="P:Kitchen.Shortcuts.ShellShortcut.IconPath"/>
            </summary>
        </member>
        <member name="P:Kitchen.Shortcuts.ShellShortcut.Icon">
            <summary>
              Retrieves the Icon of the shortcut as it will appear in Explorer.
              Use the <see cref="P:Kitchen.Shortcuts.ShellShortcut.IconPath"/> and <see cref="P:Kitchen.Shortcuts.ShellShortcut.IconIndex"/>
              properties to change it.
            </summary>
        </member>
        <member name="P:Kitchen.Shortcuts.ShellShortcut.WindowStyle">
            <summary>
              Gets or sets the System.Diagnostics.ProcessWindowStyle value
              that decides the initial show state of the shortcut target. Note that
              ProcessWindowStyle.Hidden is not a valid property value.
            </summary>
        </member>
        <member name="P:Kitchen.Shortcuts.ShellShortcut.Hotkey">
            <summary>
              Gets or sets the hotkey for the shortcut.
            </summary>
        </member>
        <member name="P:Kitchen.Shortcuts.ShellShortcut.ShellLink">
            <summary>
              Returns a reference to the internal ShellLink object,
              which can be used to perform more advanced operations
              not supported by this wrapper class, by using the
              IShellLink interface directly.
            </summary>
        </member>
        <member name="M:Kitchen.StopwatchExtensions.Elapsed(System.Diagnostics.Stopwatch,Kitchen.StopwatchUnit)">
            <summary>
            Gets the total elapsed time measured by the current instance, including the fractional part.
            </summary>
            <param name="stopwatch">The stopwatch.</param>
            <param name="unit">The time unit to measure the time taken in.</param>
        </member>
        <member name="M:Kitchen.StopwatchExtensions.TimeAction(System.Diagnostics.Stopwatch,System.Action,System.Int32,Kitchen.StopwatchUnit)">
            <summary>
            Mesaures the time taken to execute an action.
            </summary>
            <param name="stopwatch">The stopwatch to time with.</param>
            <param name="action">The action to execute.</param>
            <param name="times">How many times to execute to execute the action.</param>
            <param name="unit">The time unit to measure the time taken in.</param>
        </member>
    </members>
</doc>
